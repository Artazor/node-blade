module.exports = (function(){
  /*
   * Generated by PEG.js 0.7.0.
   *
   * http://pegjs.majda.cz/
   */
  
  function quote(s) {
    /*
     * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a
     * string literal except for the closing quote character, backslash,
     * carriage return, line separator, paragraph separator, and line feed.
     * Any character may appear in the form of an escape sequence.
     *
     * For portability, we also escape escape all control and non-ASCII
     * characters. Note that "\0" and "\v" escape sequences are not used
     * because JSHint does not like the first and IE the second.
     */
     return '"' + s
      .replace(/\\/g, '\\\\')  // backslash
      .replace(/"/g, '\\"')    // closing quote character
      .replace(/\x08/g, '\\b') // backspace
      .replace(/\t/g, '\\t')   // horizontal tab
      .replace(/\n/g, '\\n')   // line feed
      .replace(/\f/g, '\\f')   // form feed
      .replace(/\r/g, '\\r')   // carriage return
      .replace(/[\x00-\x07\x0B\x0E-\x1F\x80-\uFFFF]/g, escape)
      + '"';
  }
  
  var result = {
    /*
     * Parses the input with a generated parser. If the parsing is successfull,
     * returns a value explicitly or implicitly specified by the grammar from
     * which the parser was generated (see |PEG.buildParser|). If the parsing is
     * unsuccessful, throws |PEG.parser.SyntaxError| describing the error.
     */
    parse: function(input, startRule) {
      var parseFunctions = {
        "start": parse_start,
        "nodes": parse_nodes,
        "doctype": parse_doctype,
        "node": parse_node,
        "parent_node": parse_parent_node,
        "parent_node_types": parse_parent_node_types,
        "child_node": parse_child_node,
        "text_block_parent": parse_text_block_parent,
        "text_block_parent_types": parse_text_block_parent_types,
        "text_block_child": parse_text_block_child,
        "tag": parse_tag,
        "id_class": parse_id_class,
        "attributes": parse_attributes,
        "attribute_separator": parse_attribute_separator,
        "attribute": parse_attribute,
        "attribute_code": parse_attribute_code,
        "tag_content": parse_tag_content,
        "block": parse_block,
        "block_render": parse_block_render,
        "matched_parentheses": parse_matched_parentheses,
        "block_modifier": parse_block_modifier,
        "block_modifier_keyword": parse_block_modifier_keyword,
        "function_definition": parse_function_definition,
        "function_call": parse_function_call,
        "include": parse_include,
        "parameters": parse_parameters,
        "code": parse_code,
        "comment": parse_comment,
        "line_of_text": parse_line_of_text,
        "filter": parse_filter,
        "content_prefix": parse_content_prefix,
        "identifier": parse_identifier,
        "alpha": parse_alpha,
        "alphanumeric": parse_alphanumeric,
        "whitespace": parse_whitespace,
        "quoted_string": parse_quoted_string,
        "text_until_eol": parse_text_until_eol,
        "newline": parse_newline,
        "indents": parse_indents
      };
      
      if (startRule !== undefined) {
        if (parseFunctions[startRule] === undefined) {
          throw new Error("Invalid rule name: " + quote(startRule) + ".");
        }
      } else {
        startRule = "start";
      }
      
      var pos = { offset: 0, line: 1, column: 1, seenCR: false };
      var reportFailures = 0;
      var rightmostFailuresPos = { offset: 0, line: 1, column: 1, seenCR: false };
      var rightmostFailuresExpected = [];
      
      function padLeft(input, padding, length) {
        var result = input;
        
        var padLength = length - input.length;
        for (var i = 0; i < padLength; i++) {
          result = padding + result;
        }
        
        return result;
      }
      
      function escape(ch) {
        var charCode = ch.charCodeAt(0);
        var escapeChar;
        var length;
        
        if (charCode <= 0xFF) {
          escapeChar = 'x';
          length = 2;
        } else {
          escapeChar = 'u';
          length = 4;
        }
        
        return '\\' + escapeChar + padLeft(charCode.toString(16).toUpperCase(), '0', length);
      }
      
      function clone(object) {
        var result = {};
        for (var key in object) {
          result[key] = object[key];
        }
        return result;
      }
      
      function advance(pos, n) {
        var endOffset = pos.offset + n;
        
        for (var offset = pos.offset; offset < endOffset; offset++) {
          var ch = input.charAt(offset);
          if (ch === "\n") {
            if (!pos.seenCR) { pos.line++; }
            pos.column = 1;
            pos.seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            pos.line++;
            pos.column = 1;
            pos.seenCR = true;
          } else {
            pos.column++;
            pos.seenCR = false;
          }
        }
        
        pos.offset += n;
      }
      
      function matchFailed(failure) {
        if (pos.offset < rightmostFailuresPos.offset) {
          return;
        }
        
        if (pos.offset > rightmostFailuresPos.offset) {
          rightmostFailuresPos = clone(pos);
          rightmostFailuresExpected = [];
        }
        
        rightmostFailuresExpected.push(failure);
      }
      
      function parse_start() {
        var result0, result1, result2, result3;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        pos2 = clone(pos);
        result0 = parse_doctype();
        if (result0 !== null) {
          result1 = parse_newline();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos2);
          }
        } else {
          result0 = null;
          pos = clone(pos2);
        }
        result0 = result0 !== null ? result0 : "";
        if (result0 !== null) {
          result1 = parse_nodes();
          if (result1 !== null) {
            result2 = [];
            result3 = parse_newline();
            while (result3 !== null) {
              result2.push(result3);
              result3 = parse_newline();
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, doctype, nodes) {return {'doctype': doctype[0], 'nodes': nodes};})(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_nodes() {
        var result0, result1, result2, result3;
        var pos0, pos1, pos2, pos3;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_node();
        if (result0 !== null) {
          result1 = [];
          pos2 = clone(pos);
          pos3 = clone(pos);
          result3 = parse_newline();
          if (result3 !== null) {
            result2 = [];
            while (result3 !== null) {
              result2.push(result3);
              result3 = parse_newline();
            }
          } else {
            result2 = null;
          }
          if (result2 !== null) {
            result3 = parse_node();
            if (result3 !== null) {
              result2 = [result2, result3];
            } else {
              result2 = null;
              pos = clone(pos3);
            }
          } else {
            result2 = null;
            pos = clone(pos3);
          }
          if (result2 !== null) {
            result2 = (function(offset, line, column, node) {return node;})(pos2.offset, pos2.line, pos2.column, result2[1]);
          }
          if (result2 === null) {
            pos = clone(pos2);
          }
          while (result2 !== null) {
            result1.push(result2);
            pos2 = clone(pos);
            pos3 = clone(pos);
            result3 = parse_newline();
            if (result3 !== null) {
              result2 = [];
              while (result3 !== null) {
                result2.push(result3);
                result3 = parse_newline();
              }
            } else {
              result2 = null;
            }
            if (result2 !== null) {
              result3 = parse_node();
              if (result3 !== null) {
                result2 = [result2, result3];
              } else {
                result2 = null;
                pos = clone(pos3);
              }
            } else {
              result2 = null;
              pos = clone(pos3);
            }
            if (result2 !== null) {
              result2 = (function(offset, line, column, node) {return node;})(pos2.offset, pos2.line, pos2.column, result2[1]);
            }
            if (result2 === null) {
              pos = clone(pos2);
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, first_node, next_nodes) {next_nodes.unshift(first_node); return next_nodes;})(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_doctype() {
        var result0, result1, result2;
        var pos0, pos1;
        
        reportFailures++;
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 7) === "doctype") {
          result0 = "doctype";
          advance(pos, 7);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"doctype\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_whitespace();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_text_until_eol();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, type) {return type;})(pos0.offset, pos0.line, pos0.column, result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          if (input.substr(pos.offset, 3) === "!!!") {
            result0 = "!!!";
            advance(pos, 3);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"!!!\"");
            }
          }
          if (result0 !== null) {
            result1 = parse_whitespace();
            result1 = result1 !== null ? result1 : "";
            if (result1 !== null) {
              result2 = parse_text_until_eol();
              if (result2 !== null) {
                result0 = [result0, result1, result2];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column, type) {return type;})(pos0.offset, pos0.line, pos0.column, result0[2]);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("doctype");
        }
        return result0;
      }
      
      function parse_node() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        result0 = parse_include();
        if (result0 !== null) {
          result0 = (function(offset, line, column, include) {
        			include.line = line, include.col = column;
        			return include;
        		})(pos0.offset, pos0.line, pos0.column, result0);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          result0 = parse_block_render();
          if (result0 !== null) {
            result0 = (function(offset, line, column, render) {
          			render.line = line, render.col = column;
          			return render;
          		})(pos0.offset, pos0.line, pos0.column, result0);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
          if (result0 === null) {
            pos0 = clone(pos);
            result0 = parse_function_call();
            if (result0 !== null) {
              result0 = (function(offset, line, column, call) {
            			call.line = line, call.col = column;
            			return call;
            		})(pos0.offset, pos0.line, pos0.column, result0);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
            if (result0 === null) {
              pos0 = clone(pos);
              pos1 = clone(pos);
              result0 = parse_parent_node();
              if (result0 !== null) {
                result1 = [];
                result2 = parse_child_node();
                while (result2 !== null) {
                  result1.push(result2);
                  result2 = parse_child_node();
                }
                if (result1 !== null) {
                  result0 = [result0, result1];
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
              if (result0 !== null) {
                result0 = (function(offset, line, column, parent, children) {
              			currentParentNode = parent.parent;
              			delete parent.parent; //Don't need this back-reference anymore
              			delete parent._indent; //Don't need this either
              			parent.children = parent.children.concat(children);
              			parent.line = line, parent.col = column;
              			return parent;
              		})(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
              }
              if (result0 === null) {
                pos = clone(pos0);
              }
              if (result0 === null) {
                pos0 = clone(pos);
                pos1 = clone(pos);
                result0 = parse_text_block_parent();
                if (result0 !== null) {
                  result1 = [];
                  result2 = parse_text_block_child();
                  while (result2 !== null) {
                    result1.push(result2);
                    result2 = parse_text_block_child();
                  }
                  if (result1 !== null) {
                    result0 = [result0, result1];
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
                if (result0 !== null) {
                  result0 = (function(offset, line, column, parent, children) {
                			currentParentNode = parent.parent;
                			delete parent.parent; //Don't need this back-reference anymore
                			delete parent._indent; //Don't need this either
                			if(parent[parent.type].length > 0 && children.length > 0)
                				parent[parent.type] += "\n";
                			parent[parent.type] += children.join("\n");
                			parent.line = line, parent.col = column;
                			return parent;
                		})(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
                }
                if (result0 === null) {
                  pos = clone(pos0);
                }
              }
            }
          }
        }
        return result0;
      }
      
      function parse_parent_node() {
        var result0;
        var pos0;
        
        pos0 = clone(pos);
        result0 = parse_parent_node_types();
        if (result0 !== null) {
          result0 = (function(offset, line, column, parent) {
        		parent._indent = indent;
        		if(!(parent.children instanceof Array) )
        			parent.children = [];
        		parent.parent = currentParentNode;
        		currentParentNode = parent;
        		return parent;
        	})(pos0.offset, pos0.line, pos0.column, result0);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_parent_node_types() {
        var result0;
        
        result0 = parse_block_modifier();
        if (result0 === null) {
          result0 = parse_block();
          if (result0 === null) {
            result0 = parse_function_definition();
            if (result0 === null) {
              result0 = parse_tag();
              if (result0 === null) {
                result0 = parse_comment();
                if (result0 === null) {
                  result0 = parse_code();
                }
              }
            }
          }
        }
        return result0;
      }
      
      function parse_child_node() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        reportFailures++;
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_newline();
        if (result0 !== null) {
          result1 = parse_indents();
          if (result1 !== null) {
            result2 = (function(offset, line, column, child_indent) {
            		return child_indent == currentParentNode._indent + 1;
            	})(pos.offset, pos.line, pos.column, result1) ? "" : null;
            if (result2 !== null) {
              result3 = parse_node();
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, child_indent, child) {return child;})(pos0.offset, pos0.line, pos0.column, result0[1], result0[3]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("child node");
        }
        return result0;
      }
      
      function parse_text_block_parent() {
        var result0;
        var pos0;
        
        pos0 = clone(pos);
        result0 = parse_text_block_parent_types();
        if (result0 !== null) {
          result0 = (function(offset, line, column, parent) {
        		parent._indent = indent;
        		parent.parent = currentParentNode;
        		currentParentNode = parent;
        		return parent;
        	})(pos0.offset, pos0.line, pos0.column, result0);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_text_block_parent_types() {
        var result0;
        
        result0 = parse_filter();
        if (result0 === null) {
          result0 = parse_line_of_text();
        }
        return result0;
      }
      
      function parse_text_block_child() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        reportFailures++;
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_newline();
        if (result0 !== null) {
          result1 = parse_indents();
          if (result1 !== null) {
            result2 = (function(offset, line, column, child_indent) {
            		return child_indent > currentParentNode._indent;
            	})(pos.offset, pos.line, pos.column, result1) ? "" : null;
            if (result2 !== null) {
              result3 = parse_text_until_eol();
              result3 = result3 !== null ? result3 : "";
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, child_indent, text) {
        		//Add overeaten indents back to the text
        		var pre = "";
        		for(var i = 0; i < child_indent - currentParentNode._indent - 1; i++)
        			pre += indentToken;
        		return pre + text;
        	})(pos0.offset, pos0.line, pos0.column, result0[1], result0[3]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("text block");
        }
        return result0;
      }
      
      function parse_tag() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        reportFailures++;
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_identifier();
        result0 = result0 !== null ? result0 : "";
        if (result0 !== null) {
          result1 = parse_id_class();
          if (result1 !== null) {
            result2 = parse_attributes();
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              result3 = parse_tag_content();
              result3 = result3 !== null ? result3 : "";
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, tagName, id_class, attrs, content) {
        		/* Special case: you must specify a tag name, id,
        			or at least one class to be a valid tag */
        		if(tagName == "" && !id_class.id &&
        			id_class.classes.length == 0) return null;
        		//Return the tag
        		var tag = {
        			'type': "tag",
        			'name': tagName == "" ? "div" : tagName,
        			'id': id_class.id,
        			'classes': id_class.classes,
        			'attributes': attrs == "" ? {} : attrs,
        			'children': []
        		};
        		if(content != "")
        			tag.children.push(content);
        		return tag;
        	})(pos0.offset, pos0.line, pos0.column, result0[0], result0[1], result0[2], result0[3]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("tag");
        }
        return result0;
      }
      
      function parse_id_class() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1, pos2, pos3;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = [];
        pos2 = clone(pos);
        pos3 = clone(pos);
        if (input.charCodeAt(pos.offset) === 46) {
          result1 = ".";
          advance(pos, 1);
        } else {
          result1 = null;
          if (reportFailures === 0) {
            matchFailed("\".\"");
          }
        }
        if (result1 !== null) {
          result2 = parse_identifier();
          if (result2 !== null) {
            result1 = [result1, result2];
          } else {
            result1 = null;
            pos = clone(pos3);
          }
        } else {
          result1 = null;
          pos = clone(pos3);
        }
        if (result1 !== null) {
          result1 = (function(offset, line, column, without_dot) {return without_dot;})(pos2.offset, pos2.line, pos2.column, result1[1]);
        }
        if (result1 === null) {
          pos = clone(pos2);
        }
        while (result1 !== null) {
          result0.push(result1);
          pos2 = clone(pos);
          pos3 = clone(pos);
          if (input.charCodeAt(pos.offset) === 46) {
            result1 = ".";
            advance(pos, 1);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\".\"");
            }
          }
          if (result1 !== null) {
            result2 = parse_identifier();
            if (result2 !== null) {
              result1 = [result1, result2];
            } else {
              result1 = null;
              pos = clone(pos3);
            }
          } else {
            result1 = null;
            pos = clone(pos3);
          }
          if (result1 !== null) {
            result1 = (function(offset, line, column, without_dot) {return without_dot;})(pos2.offset, pos2.line, pos2.column, result1[1]);
          }
          if (result1 === null) {
            pos = clone(pos2);
          }
        }
        if (result0 !== null) {
          pos2 = clone(pos);
          if (input.charCodeAt(pos.offset) === 35) {
            result1 = "#";
            advance(pos, 1);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"#\"");
            }
          }
          if (result1 !== null) {
            result2 = parse_identifier();
            if (result2 !== null) {
              result1 = [result1, result2];
            } else {
              result1 = null;
              pos = clone(pos2);
            }
          } else {
            result1 = null;
            pos = clone(pos2);
          }
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = [];
            pos2 = clone(pos);
            pos3 = clone(pos);
            if (input.charCodeAt(pos.offset) === 46) {
              result3 = ".";
              advance(pos, 1);
            } else {
              result3 = null;
              if (reportFailures === 0) {
                matchFailed("\".\"");
              }
            }
            if (result3 !== null) {
              result4 = parse_identifier();
              if (result4 !== null) {
                result3 = [result3, result4];
              } else {
                result3 = null;
                pos = clone(pos3);
              }
            } else {
              result3 = null;
              pos = clone(pos3);
            }
            if (result3 !== null) {
              result3 = (function(offset, line, column, without_dot) {return without_dot;})(pos2.offset, pos2.line, pos2.column, result3[1]);
            }
            if (result3 === null) {
              pos = clone(pos2);
            }
            while (result3 !== null) {
              result2.push(result3);
              pos2 = clone(pos);
              pos3 = clone(pos);
              if (input.charCodeAt(pos.offset) === 46) {
                result3 = ".";
                advance(pos, 1);
              } else {
                result3 = null;
                if (reportFailures === 0) {
                  matchFailed("\".\"");
                }
              }
              if (result3 !== null) {
                result4 = parse_identifier();
                if (result4 !== null) {
                  result3 = [result3, result4];
                } else {
                  result3 = null;
                  pos = clone(pos3);
                }
              } else {
                result3 = null;
                pos = clone(pos3);
              }
              if (result3 !== null) {
                result3 = (function(offset, line, column, without_dot) {return without_dot;})(pos2.offset, pos2.line, pos2.column, result3[1]);
              }
              if (result3 === null) {
                pos = clone(pos2);
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, classes, id, classes2) {return {
        		'classes': classes.concat(classes2),
        		'id': id == "" ? null : id[1]
        	};})(pos0.offset, pos0.line, pos0.column, result0[0], result0[1], result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_attributes() {
        var result0, result1, result2, result3, result4, result5, result6, result7, result8;
        var pos0, pos1, pos2, pos3;
        
        reportFailures++;
        pos0 = clone(pos);
        if (input.substr(pos.offset, 2) === "()") {
          result0 = "()";
          advance(pos, 2);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"()\"");
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column) {return {};})(pos0.offset, pos0.line, pos0.column);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          if (input.charCodeAt(pos.offset) === 40) {
            result0 = "(";
            advance(pos, 1);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"(\"");
            }
          }
          if (result0 !== null) {
            result1 = [];
            result2 = parse_newline();
            while (result2 !== null) {
              result1.push(result2);
              result2 = parse_newline();
            }
            if (result1 !== null) {
              result2 = [];
              result3 = parse_whitespace();
              while (result3 !== null) {
                result2.push(result3);
                result3 = parse_whitespace();
              }
              if (result2 !== null) {
                result3 = parse_attribute();
                if (result3 !== null) {
                  result4 = [];
                  pos2 = clone(pos);
                  pos3 = clone(pos);
                  result5 = parse_attribute_separator();
                  if (result5 !== null) {
                    result6 = [];
                    result7 = parse_newline();
                    while (result7 !== null) {
                      result6.push(result7);
                      result7 = parse_newline();
                    }
                    if (result6 !== null) {
                      result7 = [];
                      result8 = parse_whitespace();
                      while (result8 !== null) {
                        result7.push(result8);
                        result8 = parse_whitespace();
                      }
                      if (result7 !== null) {
                        result8 = parse_attribute();
                        if (result8 !== null) {
                          result5 = [result5, result6, result7, result8];
                        } else {
                          result5 = null;
                          pos = clone(pos3);
                        }
                      } else {
                        result5 = null;
                        pos = clone(pos3);
                      }
                    } else {
                      result5 = null;
                      pos = clone(pos3);
                    }
                  } else {
                    result5 = null;
                    pos = clone(pos3);
                  }
                  if (result5 !== null) {
                    result5 = (function(offset, line, column, attr) {return attr;})(pos2.offset, pos2.line, pos2.column, result5[3]);
                  }
                  if (result5 === null) {
                    pos = clone(pos2);
                  }
                  while (result5 !== null) {
                    result4.push(result5);
                    pos2 = clone(pos);
                    pos3 = clone(pos);
                    result5 = parse_attribute_separator();
                    if (result5 !== null) {
                      result6 = [];
                      result7 = parse_newline();
                      while (result7 !== null) {
                        result6.push(result7);
                        result7 = parse_newline();
                      }
                      if (result6 !== null) {
                        result7 = [];
                        result8 = parse_whitespace();
                        while (result8 !== null) {
                          result7.push(result8);
                          result8 = parse_whitespace();
                        }
                        if (result7 !== null) {
                          result8 = parse_attribute();
                          if (result8 !== null) {
                            result5 = [result5, result6, result7, result8];
                          } else {
                            result5 = null;
                            pos = clone(pos3);
                          }
                        } else {
                          result5 = null;
                          pos = clone(pos3);
                        }
                      } else {
                        result5 = null;
                        pos = clone(pos3);
                      }
                    } else {
                      result5 = null;
                      pos = clone(pos3);
                    }
                    if (result5 !== null) {
                      result5 = (function(offset, line, column, attr) {return attr;})(pos2.offset, pos2.line, pos2.column, result5[3]);
                    }
                    if (result5 === null) {
                      pos = clone(pos2);
                    }
                  }
                  if (result4 !== null) {
                    result5 = [];
                    result6 = parse_newline();
                    while (result6 !== null) {
                      result5.push(result6);
                      result6 = parse_newline();
                    }
                    if (result5 !== null) {
                      result6 = [];
                      result7 = parse_whitespace();
                      while (result7 !== null) {
                        result6.push(result7);
                        result7 = parse_whitespace();
                      }
                      if (result6 !== null) {
                        if (input.charCodeAt(pos.offset) === 41) {
                          result7 = ")";
                          advance(pos, 1);
                        } else {
                          result7 = null;
                          if (reportFailures === 0) {
                            matchFailed("\")\"");
                          }
                        }
                        if (result7 !== null) {
                          result0 = [result0, result1, result2, result3, result4, result5, result6, result7];
                        } else {
                          result0 = null;
                          pos = clone(pos1);
                        }
                      } else {
                        result0 = null;
                        pos = clone(pos1);
                      }
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column, first_attr, next_attrs) {
          			var attrs = {};
          			attrs[first_attr.name] = first_attr.value;
          			for(var i in next_attrs)
          				attrs[next_attrs[i].name] = next_attrs[i].value;
          			return attrs;
          		})(pos0.offset, pos0.line, pos0.column, result0[3], result0[4]);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("attribute list");
        }
        return result0;
      }
      
      function parse_attribute_separator() {
        var result0;
        
        if (/^[, \t\r\n]/.test(input.charAt(pos.offset))) {
          result0 = input.charAt(pos.offset);
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[, \\t\\r\\n]");
          }
        }
        return result0;
      }
      
      function parse_attribute() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1, pos2;
        
        reportFailures++;
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_identifier();
        if (result0 !== null) {
          if (input.charCodeAt(pos.offset) === 33) {
            result1 = "!";
            advance(pos, 1);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"!\"");
            }
          }
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            if (input.charCodeAt(pos.offset) === 61) {
              result2 = "=";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"=\"");
              }
            }
            if (result2 !== null) {
              result3 = parse_quoted_string();
              if (result3 !== null) {
                pos2 = clone(pos);
                reportFailures++;
                if (input.charCodeAt(pos.offset) === 41) {
                  result4 = ")";
                  advance(pos, 1);
                } else {
                  result4 = null;
                  if (reportFailures === 0) {
                    matchFailed("\")\"");
                  }
                }
                if (result4 === null) {
                  result4 = parse_attribute_separator();
                }
                reportFailures--;
                if (result4 !== null) {
                  result4 = "";
                  pos = clone(pos2);
                } else {
                  result4 = null;
                }
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, name, escape, value) {return {'name': name, 'value': {'escape': escape != "!", 'text': value} }; })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1], result0[3]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          result0 = parse_identifier();
          if (result0 !== null) {
            if (input.charCodeAt(pos.offset) === 33) {
              result1 = "!";
              advance(pos, 1);
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("\"!\"");
              }
            }
            result1 = result1 !== null ? result1 : "";
            if (result1 !== null) {
              if (input.charCodeAt(pos.offset) === 61) {
                result2 = "=";
                advance(pos, 1);
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("\"=\"");
                }
              }
              if (result2 !== null) {
                result3 = parse_attribute_code();
                if (result3 !== null) {
                  result0 = [result0, result1, result2, result3];
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column, name, escape, value) {return {'name': name, 'value': {'escape': escape != "!", 'code': value} }; })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1], result0[3]);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("attribute");
        }
        return result0;
      }
      
      function parse_attribute_code() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (/^[^, \t\r\n()"]/.test(input.charAt(pos.offset))) {
          result1 = input.charAt(pos.offset);
          advance(pos, 1);
        } else {
          result1 = null;
          if (reportFailures === 0) {
            matchFailed("[^, \\t\\r\\n()\"]");
          }
        }
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            if (/^[^, \t\r\n()"]/.test(input.charAt(pos.offset))) {
              result1 = input.charAt(pos.offset);
              advance(pos, 1);
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("[^, \\t\\r\\n()\"]");
              }
            }
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          result1 = parse_quoted_string();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, code, str) {return code.join("") + (str == "" ? "" : JSON.stringify(str) );})(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          result0 = parse_quoted_string();
          if (result0 !== null) {
            result1 = parse_attribute_code();
            result1 = result1 !== null ? result1 : "";
            if (result1 !== null) {
              result0 = [result0, result1];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column, str, code) {return JSON.stringify(str) + code;})(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
        }
        return result0;
      }
      
      function parse_tag_content() {
        var result0, result1, result2, result3;
        var pos0, pos1, pos2;
        
        reportFailures++;
        pos0 = clone(pos);
        pos1 = clone(pos);
        pos2 = clone(pos);
        reportFailures++;
        if (/^[!=]/.test(input.charAt(pos.offset))) {
          result0 = input.charAt(pos.offset);
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[!=]");
          }
        }
        reportFailures--;
        if (result0 !== null) {
          result0 = "";
          pos = clone(pos2);
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          result1 = parse_content_prefix();
          if (result1 !== null) {
            result2 = parse_whitespace();
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              result3 = parse_text_until_eol();
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, content, data) {content[content.type] = data; return content;})(pos0.offset, pos0.line, pos0.column, result0[1], result0[3]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          result0 = parse_content_prefix();
          if (result0 !== null) {
            result1 = parse_whitespace();
            if (result1 !== null) {
              result2 = parse_text_until_eol();
              if (result2 !== null) {
                result0 = [result0, result1, result2];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column, content, data) {content[content.type] = data; return content;})(pos0.offset, pos0.line, pos0.column, result0[0], result0[2]);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("tag content");
        }
        return result0;
      }
      
      function parse_block() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        reportFailures++;
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 5) === "block") {
          result0 = "block";
          advance(pos, 5);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"block\"");
          }
        }
        if (result0 !== null) {
          result2 = parse_whitespace();
          if (result2 !== null) {
            result1 = [];
            while (result2 !== null) {
              result1.push(result2);
              result2 = parse_whitespace();
            }
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            result2 = parse_identifier();
            if (result2 !== null) {
              result3 = [];
              result4 = parse_whitespace();
              while (result4 !== null) {
                result3.push(result4);
                result4 = parse_whitespace();
              }
              if (result3 !== null) {
                result4 = parse_parameters();
                result4 = result4 !== null ? result4 : "";
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, name, params) {return {'type': 'block', 'name': name, 'parameters': params == "" ? null : params};})(pos0.offset, pos0.line, pos0.column, result0[2], result0[4]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("block definition");
        }
        return result0;
      }
      
      function parse_block_render() {
        var result0, result1, result2, result3, result4, result5, result6, result7;
        var pos0, pos1, pos2, pos3;
        
        reportFailures++;
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 6) === "render") {
          result0 = "render";
          advance(pos, 6);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"render\"");
          }
        }
        if (result0 !== null) {
          pos2 = clone(pos);
          result1 = parse_whitespace();
          if (result1 !== null) {
            if (input.substr(pos.offset, 5) === "block") {
              result2 = "block";
              advance(pos, 5);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"block\"");
              }
            }
            if (result2 !== null) {
              result1 = [result1, result2];
            } else {
              result1 = null;
              pos = clone(pos2);
            }
          } else {
            result1 = null;
            pos = clone(pos2);
          }
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result3 = parse_whitespace();
            if (result3 !== null) {
              result2 = [];
              while (result3 !== null) {
                result2.push(result3);
                result3 = parse_whitespace();
              }
            } else {
              result2 = null;
            }
            if (result2 !== null) {
              result3 = parse_identifier();
              if (result3 !== null) {
                result4 = [];
                result5 = parse_whitespace();
                while (result5 !== null) {
                  result4.push(result5);
                  result5 = parse_whitespace();
                }
                if (result4 !== null) {
                  pos2 = clone(pos);
                  pos3 = clone(pos);
                  if (input.charCodeAt(pos.offset) === 40) {
                    result5 = "(";
                    advance(pos, 1);
                  } else {
                    result5 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"(\"");
                    }
                  }
                  if (result5 !== null) {
                    result6 = parse_matched_parentheses();
                    result6 = result6 !== null ? result6 : "";
                    if (result6 !== null) {
                      if (input.charCodeAt(pos.offset) === 41) {
                        result7 = ")";
                        advance(pos, 1);
                      } else {
                        result7 = null;
                        if (reportFailures === 0) {
                          matchFailed("\")\"");
                        }
                      }
                      if (result7 !== null) {
                        result5 = [result5, result6, result7];
                      } else {
                        result5 = null;
                        pos = clone(pos3);
                      }
                    } else {
                      result5 = null;
                      pos = clone(pos3);
                    }
                  } else {
                    result5 = null;
                    pos = clone(pos3);
                  }
                  if (result5 !== null) {
                    result5 = (function(offset, line, column, args) {return args;})(pos2.offset, pos2.line, pos2.column, result5[1]);
                  }
                  if (result5 === null) {
                    pos = clone(pos2);
                  }
                  result5 = result5 !== null ? result5 : "";
                  if (result5 !== null) {
                    result0 = [result0, result1, result2, result3, result4, result5];
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, name, args) {return {'type': 'render', 'name': name, 'arguments': args}; })(pos0.offset, pos0.line, pos0.column, result0[3], result0[5]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("block render");
        }
        return result0;
      }
      
      function parse_matched_parentheses() {
        var result0, result1, result2, result3;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        pos2 = clone(pos);
        reportFailures++;
        if (input.charCodeAt(pos.offset) === 34) {
          result0 = "\"";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"\\\"\"");
          }
        }
        reportFailures--;
        if (result0 !== null) {
          result0 = "";
          pos = clone(pos2);
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          result1 = parse_quoted_string();
          if (result1 !== null) {
            result2 = [];
            result3 = parse_matched_parentheses();
            while (result3 !== null) {
              result2.push(result3);
              result3 = parse_matched_parentheses();
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, quote, data) {return '"' + quote + '"' + data.join("");})(pos0.offset, pos0.line, pos0.column, result0[1], result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          pos2 = clone(pos);
          reportFailures++;
          if (input.charCodeAt(pos.offset) === 39) {
            result0 = "'";
            advance(pos, 1);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"'\"");
            }
          }
          reportFailures--;
          if (result0 !== null) {
            result0 = "";
            pos = clone(pos2);
          } else {
            result0 = null;
          }
          if (result0 !== null) {
            result1 = parse_quoted_string();
            if (result1 !== null) {
              result2 = [];
              result3 = parse_matched_parentheses();
              while (result3 !== null) {
                result2.push(result3);
                result3 = parse_matched_parentheses();
              }
              if (result2 !== null) {
                result0 = [result0, result1, result2];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column, quote, data) {return "'" + quote + "'" + data.join("");})(pos0.offset, pos0.line, pos0.column, result0[1], result0[2]);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
          if (result0 === null) {
            pos0 = clone(pos);
            pos1 = clone(pos);
            if (input.charCodeAt(pos.offset) === 40) {
              result0 = "(";
              advance(pos, 1);
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"(\"");
              }
            }
            if (result0 !== null) {
              result1 = [];
              result2 = parse_matched_parentheses();
              while (result2 !== null) {
                result1.push(result2);
                result2 = parse_matched_parentheses();
              }
              if (result1 !== null) {
                if (input.charCodeAt(pos.offset) === 41) {
                  result2 = ")";
                  advance(pos, 1);
                } else {
                  result2 = null;
                  if (reportFailures === 0) {
                    matchFailed("\")\"");
                  }
                }
                if (result2 !== null) {
                  result0 = [result0, result1, result2];
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
            if (result0 !== null) {
              result0 = (function(offset, line, column, data) {return "(" + data.join("") + ")";})(pos0.offset, pos0.line, pos0.column, result0[1]);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
            if (result0 === null) {
              pos0 = clone(pos);
              if (/^[^"'()]/.test(input.charAt(pos.offset))) {
                result1 = input.charAt(pos.offset);
                advance(pos, 1);
              } else {
                result1 = null;
                if (reportFailures === 0) {
                  matchFailed("[^\"'()]");
                }
              }
              if (result1 !== null) {
                result0 = [];
                while (result1 !== null) {
                  result0.push(result1);
                  if (/^[^"'()]/.test(input.charAt(pos.offset))) {
                    result1 = input.charAt(pos.offset);
                    advance(pos, 1);
                  } else {
                    result1 = null;
                    if (reportFailures === 0) {
                      matchFailed("[^\"'()]");
                    }
                  }
                }
              } else {
                result0 = null;
              }
              if (result0 !== null) {
                result0 = (function(offset, line, column, data) {return data.join("");})(pos0.offset, pos0.line, pos0.column, result0);
              }
              if (result0 === null) {
                pos = clone(pos0);
              }
            }
          }
        }
        return result0;
      }
      
      function parse_block_modifier() {
        var result0, result1, result2, result3, result4, result5;
        var pos0, pos1, pos2;
        
        reportFailures++;
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_block_modifier_keyword();
        if (result0 !== null) {
          pos2 = clone(pos);
          result1 = parse_whitespace();
          if (result1 !== null) {
            if (input.substr(pos.offset, 5) === "block") {
              result2 = "block";
              advance(pos, 5);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"block\"");
              }
            }
            if (result2 !== null) {
              result1 = [result1, result2];
            } else {
              result1 = null;
              pos = clone(pos2);
            }
          } else {
            result1 = null;
            pos = clone(pos2);
          }
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result3 = parse_whitespace();
            if (result3 !== null) {
              result2 = [];
              while (result3 !== null) {
                result2.push(result3);
                result3 = parse_whitespace();
              }
            } else {
              result2 = null;
            }
            if (result2 !== null) {
              result3 = parse_identifier();
              if (result3 !== null) {
                result4 = [];
                result5 = parse_whitespace();
                while (result5 !== null) {
                  result4.push(result5);
                  result5 = parse_whitespace();
                }
                if (result4 !== null) {
                  result5 = parse_parameters();
                  result5 = result5 !== null ? result5 : "";
                  if (result5 !== null) {
                    result0 = [result0, result1, result2, result3, result4, result5];
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, keyword, name, params) {return {'type': keyword, 'name': name, 'parameters': params == "" ? [] : params};})(pos0.offset, pos0.line, pos0.column, result0[0], result0[3], result0[5]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("block modifier (i.e. append, prepend, or replace)");
        }
        return result0;
      }
      
      function parse_block_modifier_keyword() {
        var result0;
        
        if (input.substr(pos.offset, 6) === "append") {
          result0 = "append";
          advance(pos, 6);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"append\"");
          }
        }
        if (result0 === null) {
          if (input.substr(pos.offset, 7) === "prepend") {
            result0 = "prepend";
            advance(pos, 7);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"prepend\"");
            }
          }
          if (result0 === null) {
            if (input.substr(pos.offset, 7) === "replace") {
              result0 = "replace";
              advance(pos, 7);
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"replace\"");
              }
            }
          }
        }
        return result0;
      }
      
      function parse_function_definition() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        reportFailures++;
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 8) === "function") {
          result0 = "function";
          advance(pos, 8);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"function\"");
          }
        }
        if (result0 !== null) {
          result2 = parse_whitespace();
          if (result2 !== null) {
            result1 = [];
            while (result2 !== null) {
              result1.push(result2);
              result2 = parse_whitespace();
            }
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            result2 = parse_identifier();
            if (result2 !== null) {
              result3 = [];
              result4 = parse_whitespace();
              while (result4 !== null) {
                result3.push(result4);
                result4 = parse_whitespace();
              }
              if (result3 !== null) {
                result4 = parse_parameters();
                result4 = result4 !== null ? result4 : "";
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, name, params) {return {'type': 'function', 'name': name, 'parameters': params == "" ? null : params};})(pos0.offset, pos0.line, pos0.column, result0[2], result0[4]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("function definition");
        }
        return result0;
      }
      
      function parse_function_call() {
        var result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11;
        var pos0, pos1, pos2, pos3;
        
        reportFailures++;
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 4) === "call") {
          result0 = "call";
          advance(pos, 4);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"call\"");
          }
        }
        if (result0 !== null) {
          pos2 = clone(pos);
          result1 = parse_whitespace();
          if (result1 !== null) {
            if (input.substr(pos.offset, 8) === "function") {
              result2 = "function";
              advance(pos, 8);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"function\"");
              }
            }
            if (result2 !== null) {
              result1 = [result1, result2];
            } else {
              result1 = null;
              pos = clone(pos2);
            }
          } else {
            result1 = null;
            pos = clone(pos2);
          }
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result3 = parse_whitespace();
            if (result3 !== null) {
              result2 = [];
              while (result3 !== null) {
                result2.push(result3);
                result3 = parse_whitespace();
              }
            } else {
              result2 = null;
            }
            if (result2 !== null) {
              pos2 = clone(pos);
              pos3 = clone(pos);
              result3 = parse_identifier();
              if (result3 !== null) {
                result4 = [];
                result5 = parse_whitespace();
                while (result5 !== null) {
                  result4.push(result5);
                  result5 = parse_whitespace();
                }
                if (result4 !== null) {
                  if (input.charCodeAt(pos.offset) === 43) {
                    result5 = "+";
                    advance(pos, 1);
                  } else {
                    result5 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"+\"");
                    }
                  }
                  result5 = result5 !== null ? result5 : "";
                  if (result5 !== null) {
                    if (input.charCodeAt(pos.offset) === 61) {
                      result6 = "=";
                      advance(pos, 1);
                    } else {
                      result6 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"=\"");
                      }
                    }
                    if (result6 !== null) {
                      result7 = [];
                      result8 = parse_whitespace();
                      while (result8 !== null) {
                        result7.push(result8);
                        result8 = parse_whitespace();
                      }
                      if (result7 !== null) {
                        result3 = [result3, result4, result5, result6, result7];
                      } else {
                        result3 = null;
                        pos = clone(pos3);
                      }
                    } else {
                      result3 = null;
                      pos = clone(pos3);
                    }
                  } else {
                    result3 = null;
                    pos = clone(pos3);
                  }
                } else {
                  result3 = null;
                  pos = clone(pos3);
                }
              } else {
                result3 = null;
                pos = clone(pos3);
              }
              if (result3 !== null) {
                result3 = (function(offset, line, column, var_name, append) {return {'to': var_name, 'append': append != ""}; })(pos2.offset, pos2.line, pos2.column, result3[0], result3[2]);
              }
              if (result3 === null) {
                pos = clone(pos2);
              }
              if (result3 !== null) {
                result4 = parse_identifier();
                if (result4 !== null) {
                  result5 = [];
                  result6 = parse_whitespace();
                  while (result6 !== null) {
                    result5.push(result6);
                    result6 = parse_whitespace();
                  }
                  if (result5 !== null) {
                    pos2 = clone(pos);
                    pos3 = clone(pos);
                    if (input.charCodeAt(pos.offset) === 40) {
                      result6 = "(";
                      advance(pos, 1);
                    } else {
                      result6 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"(\"");
                      }
                    }
                    if (result6 !== null) {
                      result7 = parse_matched_parentheses();
                      result7 = result7 !== null ? result7 : "";
                      if (result7 !== null) {
                        if (input.charCodeAt(pos.offset) === 41) {
                          result8 = ")";
                          advance(pos, 1);
                        } else {
                          result8 = null;
                          if (reportFailures === 0) {
                            matchFailed("\")\"");
                          }
                        }
                        if (result8 !== null) {
                          result6 = [result6, result7, result8];
                        } else {
                          result6 = null;
                          pos = clone(pos3);
                        }
                      } else {
                        result6 = null;
                        pos = clone(pos3);
                      }
                    } else {
                      result6 = null;
                      pos = clone(pos3);
                    }
                    if (result6 !== null) {
                      result6 = (function(offset, line, column, args) {return args;})(pos2.offset, pos2.line, pos2.column, result6[1]);
                    }
                    if (result6 === null) {
                      pos = clone(pos2);
                    }
                    result6 = result6 !== null ? result6 : "";
                    if (result6 !== null) {
                      result7 = parse_id_class();
                      if (result7 !== null) {
                        result0 = [result0, result1, result2, result3, result4, result5, result6, result7];
                      } else {
                        result0 = null;
                        pos = clone(pos1);
                      }
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, output, name, args, id_class) {
        			var func = {'type': 'call', 'name': name, 'arguments': args,
        				'id': id_class.id, 'classes': id_class.classes};
        			if(output != "")
        				func.output = output;
        			return func;
        		})(pos0.offset, pos0.line, pos0.column, result0[3], result0[4], result0[6], result0[7]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          if (input.substr(pos.offset, 4) === "call") {
            result0 = "call";
            advance(pos, 4);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"call\"");
            }
          }
          if (result0 !== null) {
            pos2 = clone(pos);
            result1 = parse_whitespace();
            if (result1 !== null) {
              if (input.substr(pos.offset, 8) === "function") {
                result2 = "function";
                advance(pos, 8);
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("\"function\"");
                }
              }
              if (result2 !== null) {
                result1 = [result1, result2];
              } else {
                result1 = null;
                pos = clone(pos2);
              }
            } else {
              result1 = null;
              pos = clone(pos2);
            }
            result1 = result1 !== null ? result1 : "";
            if (result1 !== null) {
              result3 = parse_whitespace();
              if (result3 !== null) {
                result2 = [];
                while (result3 !== null) {
                  result2.push(result3);
                  result3 = parse_whitespace();
                }
              } else {
                result2 = null;
              }
              if (result2 !== null) {
                result3 = parse_identifier();
                if (result3 !== null) {
                  result4 = [];
                  result5 = parse_whitespace();
                  while (result5 !== null) {
                    result4.push(result5);
                    result5 = parse_whitespace();
                  }
                  if (result4 !== null) {
                    pos2 = clone(pos);
                    pos3 = clone(pos);
                    if (input.charCodeAt(pos.offset) === 40) {
                      result5 = "(";
                      advance(pos, 1);
                    } else {
                      result5 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"(\"");
                      }
                    }
                    if (result5 !== null) {
                      result6 = parse_matched_parentheses();
                      result6 = result6 !== null ? result6 : "";
                      if (result6 !== null) {
                        if (input.charCodeAt(pos.offset) === 41) {
                          result7 = ")";
                          advance(pos, 1);
                        } else {
                          result7 = null;
                          if (reportFailures === 0) {
                            matchFailed("\")\"");
                          }
                        }
                        if (result7 !== null) {
                          result5 = [result5, result6, result7];
                        } else {
                          result5 = null;
                          pos = clone(pos3);
                        }
                      } else {
                        result5 = null;
                        pos = clone(pos3);
                      }
                    } else {
                      result5 = null;
                      pos = clone(pos3);
                    }
                    if (result5 !== null) {
                      result5 = (function(offset, line, column, args) {return args;})(pos2.offset, pos2.line, pos2.column, result5[1]);
                    }
                    if (result5 === null) {
                      pos = clone(pos2);
                    }
                    result5 = result5 !== null ? result5 : "";
                    if (result5 !== null) {
                      result6 = parse_id_class();
                      if (result6 !== null) {
                        pos2 = clone(pos);
                        pos3 = clone(pos);
                        result8 = parse_whitespace();
                        if (result8 !== null) {
                          result7 = [];
                          while (result8 !== null) {
                            result7.push(result8);
                            result8 = parse_whitespace();
                          }
                        } else {
                          result7 = null;
                        }
                        if (result7 !== null) {
                          if (input.charCodeAt(pos.offset) === 62) {
                            result8 = ">";
                            advance(pos, 1);
                          } else {
                            result8 = null;
                            if (reportFailures === 0) {
                              matchFailed("\">\"");
                            }
                          }
                          if (result8 !== null) {
                            if (input.charCodeAt(pos.offset) === 62) {
                              result9 = ">";
                              advance(pos, 1);
                            } else {
                              result9 = null;
                              if (reportFailures === 0) {
                                matchFailed("\">\"");
                              }
                            }
                            result9 = result9 !== null ? result9 : "";
                            if (result9 !== null) {
                              result10 = [];
                              result11 = parse_whitespace();
                              while (result11 !== null) {
                                result10.push(result11);
                                result11 = parse_whitespace();
                              }
                              if (result10 !== null) {
                                result11 = parse_identifier();
                                if (result11 !== null) {
                                  result7 = [result7, result8, result9, result10, result11];
                                } else {
                                  result7 = null;
                                  pos = clone(pos3);
                                }
                              } else {
                                result7 = null;
                                pos = clone(pos3);
                              }
                            } else {
                              result7 = null;
                              pos = clone(pos3);
                            }
                          } else {
                            result7 = null;
                            pos = clone(pos3);
                          }
                        } else {
                          result7 = null;
                          pos = clone(pos3);
                        }
                        if (result7 !== null) {
                          result7 = (function(offset, line, column, append, var_name) {return {'to': var_name, 'append': append != ""}; })(pos2.offset, pos2.line, pos2.column, result7[2], result7[4]);
                        }
                        if (result7 === null) {
                          pos = clone(pos2);
                        }
                        result7 = result7 !== null ? result7 : "";
                        if (result7 !== null) {
                          result0 = [result0, result1, result2, result3, result4, result5, result6, result7];
                        } else {
                          result0 = null;
                          pos = clone(pos1);
                        }
                      } else {
                        result0 = null;
                        pos = clone(pos1);
                      }
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column, name, args, id_class, output) {
          			var func = {'type': 'call', 'name': name, 'arguments': args,
          				'id': id_class.id, 'classes': id_class.classes};
          			if(output != "")
          				func.output = output;
          			return func;
          		})(pos0.offset, pos0.line, pos0.column, result0[3], result0[5], result0[6], result0[7]);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("function call");
        }
        return result0;
      }
      
      function parse_include() {
        var result0, result1, result2;
        var pos0, pos1;
        
        reportFailures++;
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 7) === "include") {
          result0 = "include";
          advance(pos, 7);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"include\"");
          }
        }
        if (result0 !== null) {
          result2 = parse_whitespace();
          if (result2 !== null) {
            result1 = [];
            while (result2 !== null) {
              result1.push(result2);
              result2 = parse_whitespace();
            }
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            result2 = parse_quoted_string();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, filename) {return {'type': 'include', 'filename': filename};})(pos0.offset, pos0.line, pos0.column, result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          if (input.substr(pos.offset, 7) === "include") {
            result0 = "include";
            advance(pos, 7);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"include\"");
            }
          }
          if (result0 !== null) {
            result2 = parse_whitespace();
            if (result2 !== null) {
              result1 = [];
              while (result2 !== null) {
                result1.push(result2);
                result2 = parse_whitespace();
              }
            } else {
              result1 = null;
            }
            if (result1 !== null) {
              result2 = parse_identifier();
              if (result2 !== null) {
                result0 = [result0, result1, result2];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column, filename) {return {'type': 'include', 'code': filename};})(pos0.offset, pos0.line, pos0.column, result0[2]);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("include");
        }
        return result0;
      }
      
      function parse_parameters() {
        var result0, result1, result2, result3, result4, result5, result6, result7, result8;
        var pos0, pos1, pos2, pos3;
        
        reportFailures++;
        pos0 = clone(pos);
        if (input.substr(pos.offset, 2) === "()") {
          result0 = "()";
          advance(pos, 2);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"()\"");
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column) {return [];})(pos0.offset, pos0.line, pos0.column);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          if (input.charCodeAt(pos.offset) === 40) {
            result0 = "(";
            advance(pos, 1);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"(\"");
            }
          }
          if (result0 !== null) {
            result1 = [];
            result2 = parse_newline();
            while (result2 !== null) {
              result1.push(result2);
              result2 = parse_newline();
            }
            if (result1 !== null) {
              result2 = [];
              result3 = parse_whitespace();
              while (result3 !== null) {
                result2.push(result3);
                result3 = parse_whitespace();
              }
              if (result2 !== null) {
                result3 = parse_identifier();
                if (result3 !== null) {
                  result4 = [];
                  pos2 = clone(pos);
                  pos3 = clone(pos);
                  if (/^[, \r\n]/.test(input.charAt(pos.offset))) {
                    result5 = input.charAt(pos.offset);
                    advance(pos, 1);
                  } else {
                    result5 = null;
                    if (reportFailures === 0) {
                      matchFailed("[, \\r\\n]");
                    }
                  }
                  if (result5 !== null) {
                    result6 = [];
                    result7 = parse_newline();
                    while (result7 !== null) {
                      result6.push(result7);
                      result7 = parse_newline();
                    }
                    if (result6 !== null) {
                      result7 = [];
                      result8 = parse_whitespace();
                      while (result8 !== null) {
                        result7.push(result8);
                        result8 = parse_whitespace();
                      }
                      if (result7 !== null) {
                        result8 = parse_identifier();
                        if (result8 !== null) {
                          result5 = [result5, result6, result7, result8];
                        } else {
                          result5 = null;
                          pos = clone(pos3);
                        }
                      } else {
                        result5 = null;
                        pos = clone(pos3);
                      }
                    } else {
                      result5 = null;
                      pos = clone(pos3);
                    }
                  } else {
                    result5 = null;
                    pos = clone(pos3);
                  }
                  if (result5 !== null) {
                    result5 = (function(offset, line, column, param) {return param;})(pos2.offset, pos2.line, pos2.column, result5[3]);
                  }
                  if (result5 === null) {
                    pos = clone(pos2);
                  }
                  while (result5 !== null) {
                    result4.push(result5);
                    pos2 = clone(pos);
                    pos3 = clone(pos);
                    if (/^[, \r\n]/.test(input.charAt(pos.offset))) {
                      result5 = input.charAt(pos.offset);
                      advance(pos, 1);
                    } else {
                      result5 = null;
                      if (reportFailures === 0) {
                        matchFailed("[, \\r\\n]");
                      }
                    }
                    if (result5 !== null) {
                      result6 = [];
                      result7 = parse_newline();
                      while (result7 !== null) {
                        result6.push(result7);
                        result7 = parse_newline();
                      }
                      if (result6 !== null) {
                        result7 = [];
                        result8 = parse_whitespace();
                        while (result8 !== null) {
                          result7.push(result8);
                          result8 = parse_whitespace();
                        }
                        if (result7 !== null) {
                          result8 = parse_identifier();
                          if (result8 !== null) {
                            result5 = [result5, result6, result7, result8];
                          } else {
                            result5 = null;
                            pos = clone(pos3);
                          }
                        } else {
                          result5 = null;
                          pos = clone(pos3);
                        }
                      } else {
                        result5 = null;
                        pos = clone(pos3);
                      }
                    } else {
                      result5 = null;
                      pos = clone(pos3);
                    }
                    if (result5 !== null) {
                      result5 = (function(offset, line, column, param) {return param;})(pos2.offset, pos2.line, pos2.column, result5[3]);
                    }
                    if (result5 === null) {
                      pos = clone(pos2);
                    }
                  }
                  if (result4 !== null) {
                    result5 = [];
                    result6 = parse_newline();
                    while (result6 !== null) {
                      result5.push(result6);
                      result6 = parse_newline();
                    }
                    if (result5 !== null) {
                      result6 = [];
                      result7 = parse_whitespace();
                      while (result7 !== null) {
                        result6.push(result7);
                        result7 = parse_whitespace();
                      }
                      if (result6 !== null) {
                        if (input.charCodeAt(pos.offset) === 41) {
                          result7 = ")";
                          advance(pos, 1);
                        } else {
                          result7 = null;
                          if (reportFailures === 0) {
                            matchFailed("\")\"");
                          }
                        }
                        if (result7 !== null) {
                          result0 = [result0, result1, result2, result3, result4, result5, result6, result7];
                        } else {
                          result0 = null;
                          pos = clone(pos1);
                        }
                      } else {
                        result0 = null;
                        pos = clone(pos1);
                      }
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column, first_param, next_params) {return [first_param].concat(next_params);})(pos0.offset, pos0.line, pos0.column, result0[3], result0[4]);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("parameter list");
        }
        return result0;
      }
      
      function parse_code() {
        var result0, result1, result2;
        var pos0, pos1;
        
        reportFailures++;
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.charCodeAt(pos.offset) === 45) {
          result0 = "-";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"-\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_whitespace();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_text_until_eol();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, code) {return {'type': 'code', 'code': code}; })(pos0.offset, pos0.line, pos0.column, result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("code");
        }
        return result0;
      }
      
      function parse_comment() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        reportFailures++;
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 5) === "//if ") {
          result0 = "//if ";
          advance(pos, 5);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"//if \"");
          }
        }
        if (result0 !== null) {
          result1 = parse_text_until_eol();
          if (result1 !== null) {
            result2 = (function(offset, line, column, comment) {
            			return comment.indexOf("IE") >= 0;
            		})(pos.offset, pos.line, pos.column, result1) ? "" : null;
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, comment) {return {
        			'type': 'conditional_comment',
        			'comment': "if " + comment
        		}; })(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          if (input.substr(pos.offset, 2) === "//") {
            result0 = "//";
            advance(pos, 2);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"//\"");
            }
          }
          if (result0 !== null) {
            if (input.charCodeAt(pos.offset) === 45) {
              result1 = "-";
              advance(pos, 1);
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("\"-\"");
              }
            }
            result1 = result1 !== null ? result1 : "";
            if (result1 !== null) {
              result2 = parse_whitespace();
              result2 = result2 !== null ? result2 : "";
              if (result2 !== null) {
                result3 = parse_text_until_eol();
                result3 = result3 !== null ? result3 : "";
                if (result3 !== null) {
                  result0 = [result0, result1, result2, result3];
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column, hidden, comment) {return {
          			'type': 'comment',
          			'comment': comment,
          			'hidden': hidden != ""
          		}; })(pos0.offset, pos0.line, pos0.column, result0[1], result0[3]);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("comment");
        }
        return result0;
      }
      
      function parse_line_of_text() {
        var result0, result1, result2, result3;
        var pos0, pos1, pos2;
        
        reportFailures++;
        pos0 = clone(pos);
        pos1 = clone(pos);
        pos2 = clone(pos);
        reportFailures++;
        if (/^[!=]/.test(input.charAt(pos.offset))) {
          result0 = input.charAt(pos.offset);
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[!=]");
          }
        }
        reportFailures--;
        if (result0 !== null) {
          result0 = "";
          pos = clone(pos2);
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          result1 = parse_content_prefix();
          if (result1 !== null) {
            result2 = parse_whitespace();
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              result3 = parse_text_until_eol();
              result3 = result3 !== null ? result3 : "";
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, content, data) {content[content.type] = data; return content;})(pos0.offset, pos0.line, pos0.column, result0[1], result0[3]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          if (input.charCodeAt(pos.offset) === 124) {
            result0 = "|";
            advance(pos, 1);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"|\"");
            }
          }
          if (result0 !== null) {
            result1 = parse_content_prefix();
            if (result1 !== null) {
              result2 = parse_whitespace();
              result2 = result2 !== null ? result2 : "";
              if (result2 !== null) {
                result3 = parse_text_until_eol();
                result3 = result3 !== null ? result3 : "";
                if (result3 !== null) {
                  result0 = [result0, result1, result2, result3];
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column, content, data) {content[content.type] = data; return content;})(pos0.offset, pos0.line, pos0.column, result0[1], result0[3]);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("line of text");
        }
        return result0;
      }
      
      function parse_filter() {
        var result0, result1;
        var pos0, pos1;
        
        reportFailures++;
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.charCodeAt(pos.offset) === 58) {
          result0 = ":";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\":\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_identifier();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, data) {return {'type': 'filtered_text', 'name': data, 'filtered_text': ""};})(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("filter");
        }
        return result0;
      }
      
      function parse_content_prefix() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.charCodeAt(pos.offset) === 33) {
          result0 = "!";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"!\"");
          }
        }
        result0 = result0 !== null ? result0 : "";
        if (result0 !== null) {
          if (input.charCodeAt(pos.offset) === 61) {
            result1 = "=";
            advance(pos, 1);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"=\"");
            }
          }
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, escape, code) {return {
        		'escape': escape != "!",
        		'type': code == "=" ? 'code_output' : 'text'
        	};})(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_identifier() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (/^[a-zA-Z_]/.test(input.charAt(pos.offset))) {
          result0 = input.charAt(pos.offset);
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[a-zA-Z_]");
          }
        }
        if (result0 !== null) {
          result1 = [];
          if (/^[a-zA-Z0-9_:\-]/.test(input.charAt(pos.offset))) {
            result2 = input.charAt(pos.offset);
            advance(pos, 1);
          } else {
            result2 = null;
            if (reportFailures === 0) {
              matchFailed("[a-zA-Z0-9_:\\-]");
            }
          }
          while (result2 !== null) {
            result1.push(result2);
            if (/^[a-zA-Z0-9_:\-]/.test(input.charAt(pos.offset))) {
              result2 = input.charAt(pos.offset);
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("[a-zA-Z0-9_:\\-]");
              }
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, first_char, next_chars) {return first_char + next_chars.join("");})(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_alpha() {
        var result0, result1;
        var pos0;
        
        reportFailures++;
        pos0 = clone(pos);
        if (/^[a-zA-Z]/.test(input.charAt(pos.offset))) {
          result1 = input.charAt(pos.offset);
          advance(pos, 1);
        } else {
          result1 = null;
          if (reportFailures === 0) {
            matchFailed("[a-zA-Z]");
          }
        }
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            if (/^[a-zA-Z]/.test(input.charAt(pos.offset))) {
              result1 = input.charAt(pos.offset);
              advance(pos, 1);
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("[a-zA-Z]");
              }
            }
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, data) {return data.join("");})(pos0.offset, pos0.line, pos0.column, result0);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("letters");
        }
        return result0;
      }
      
      function parse_alphanumeric() {
        var result0, result1;
        var pos0;
        
        reportFailures++;
        pos0 = clone(pos);
        if (/^[a-zA-Z0-9]/.test(input.charAt(pos.offset))) {
          result1 = input.charAt(pos.offset);
          advance(pos, 1);
        } else {
          result1 = null;
          if (reportFailures === 0) {
            matchFailed("[a-zA-Z0-9]");
          }
        }
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            if (/^[a-zA-Z0-9]/.test(input.charAt(pos.offset))) {
              result1 = input.charAt(pos.offset);
              advance(pos, 1);
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("[a-zA-Z0-9]");
              }
            }
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, data) {return data.join("");})(pos0.offset, pos0.line, pos0.column, result0);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("letters and numbers");
        }
        return result0;
      }
      
      function parse_whitespace() {
        var result0;
        var pos0;
        
        reportFailures++;
        pos0 = clone(pos);
        if (/^[ \t]/.test(input.charAt(pos.offset))) {
          result0 = input.charAt(pos.offset);
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[ \\t]");
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column) {/* Do nothing */})(pos0.offset, pos0.line, pos0.column);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("whitespace (space or horizontal tab)");
        }
        return result0;
      }
      
      function parse_quoted_string() {
        var result0, result1, result2, result3;
        var pos0, pos1, pos2, pos3;
        
        reportFailures++;
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.charCodeAt(pos.offset) === 39) {
          result0 = "'";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"'\"");
          }
        }
        if (result0 !== null) {
          pos2 = clone(pos);
          pos3 = clone(pos);
          if (input.charCodeAt(pos.offset) === 92) {
            result2 = "\\";
            advance(pos, 1);
          } else {
            result2 = null;
            if (reportFailures === 0) {
              matchFailed("\"\\\\\"");
            }
          }
          if (result2 !== null) {
            if (input.length > pos.offset) {
              result3 = input.charAt(pos.offset);
              advance(pos, 1);
            } else {
              result3 = null;
              if (reportFailures === 0) {
                matchFailed("any character");
              }
            }
            if (result3 !== null) {
              result2 = [result2, result3];
            } else {
              result2 = null;
              pos = clone(pos3);
            }
          } else {
            result2 = null;
            pos = clone(pos3);
          }
          if (result2 !== null) {
            result2 = (function(offset, line, column, escaped) {return "\\" + escaped;})(pos2.offset, pos2.line, pos2.column, result2[1]);
          }
          if (result2 === null) {
            pos = clone(pos2);
          }
          if (result2 === null) {
            if (/^[^']/.test(input.charAt(pos.offset))) {
              result2 = input.charAt(pos.offset);
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("[^']");
              }
            }
          }
          if (result2 !== null) {
            result1 = [];
            while (result2 !== null) {
              result1.push(result2);
              pos2 = clone(pos);
              pos3 = clone(pos);
              if (input.charCodeAt(pos.offset) === 92) {
                result2 = "\\";
                advance(pos, 1);
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("\"\\\\\"");
                }
              }
              if (result2 !== null) {
                if (input.length > pos.offset) {
                  result3 = input.charAt(pos.offset);
                  advance(pos, 1);
                } else {
                  result3 = null;
                  if (reportFailures === 0) {
                    matchFailed("any character");
                  }
                }
                if (result3 !== null) {
                  result2 = [result2, result3];
                } else {
                  result2 = null;
                  pos = clone(pos3);
                }
              } else {
                result2 = null;
                pos = clone(pos3);
              }
              if (result2 !== null) {
                result2 = (function(offset, line, column, escaped) {return "\\" + escaped;})(pos2.offset, pos2.line, pos2.column, result2[1]);
              }
              if (result2 === null) {
                pos = clone(pos2);
              }
              if (result2 === null) {
                if (/^[^']/.test(input.charAt(pos.offset))) {
                  result2 = input.charAt(pos.offset);
                  advance(pos, 1);
                } else {
                  result2 = null;
                  if (reportFailures === 0) {
                    matchFailed("[^']");
                  }
                }
              }
            }
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            if (input.charCodeAt(pos.offset) === 39) {
              result2 = "'";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"'\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, data) {return eval("'" + data.join("") + "'");})(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          if (input.charCodeAt(pos.offset) === 34) {
            result0 = "\"";
            advance(pos, 1);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"\\\"\"");
            }
          }
          if (result0 !== null) {
            pos2 = clone(pos);
            pos3 = clone(pos);
            if (input.charCodeAt(pos.offset) === 92) {
              result2 = "\\";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"\\\\\"");
              }
            }
            if (result2 !== null) {
              if (input.length > pos.offset) {
                result3 = input.charAt(pos.offset);
                advance(pos, 1);
              } else {
                result3 = null;
                if (reportFailures === 0) {
                  matchFailed("any character");
                }
              }
              if (result3 !== null) {
                result2 = [result2, result3];
              } else {
                result2 = null;
                pos = clone(pos3);
              }
            } else {
              result2 = null;
              pos = clone(pos3);
            }
            if (result2 !== null) {
              result2 = (function(offset, line, column, escaped) {return "\\" + escaped;})(pos2.offset, pos2.line, pos2.column, result2[1]);
            }
            if (result2 === null) {
              pos = clone(pos2);
            }
            if (result2 === null) {
              if (/^[^"]/.test(input.charAt(pos.offset))) {
                result2 = input.charAt(pos.offset);
                advance(pos, 1);
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("[^\"]");
                }
              }
            }
            if (result2 !== null) {
              result1 = [];
              while (result2 !== null) {
                result1.push(result2);
                pos2 = clone(pos);
                pos3 = clone(pos);
                if (input.charCodeAt(pos.offset) === 92) {
                  result2 = "\\";
                  advance(pos, 1);
                } else {
                  result2 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"\\\\\"");
                  }
                }
                if (result2 !== null) {
                  if (input.length > pos.offset) {
                    result3 = input.charAt(pos.offset);
                    advance(pos, 1);
                  } else {
                    result3 = null;
                    if (reportFailures === 0) {
                      matchFailed("any character");
                    }
                  }
                  if (result3 !== null) {
                    result2 = [result2, result3];
                  } else {
                    result2 = null;
                    pos = clone(pos3);
                  }
                } else {
                  result2 = null;
                  pos = clone(pos3);
                }
                if (result2 !== null) {
                  result2 = (function(offset, line, column, escaped) {return "\\" + escaped;})(pos2.offset, pos2.line, pos2.column, result2[1]);
                }
                if (result2 === null) {
                  pos = clone(pos2);
                }
                if (result2 === null) {
                  if (/^[^"]/.test(input.charAt(pos.offset))) {
                    result2 = input.charAt(pos.offset);
                    advance(pos, 1);
                  } else {
                    result2 = null;
                    if (reportFailures === 0) {
                      matchFailed("[^\"]");
                    }
                  }
                }
              }
            } else {
              result1 = null;
            }
            if (result1 !== null) {
              if (input.charCodeAt(pos.offset) === 34) {
                result2 = "\"";
                advance(pos, 1);
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("\"\\\"\"");
                }
              }
              if (result2 !== null) {
                result0 = [result0, result1, result2];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column, data) {return eval('"' + data.join("") + '"');})(pos0.offset, pos0.line, pos0.column, result0[1]);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("quoted string");
        }
        return result0;
      }
      
      function parse_text_until_eol() {
        var result0, result1;
        var pos0;
        
        reportFailures++;
        pos0 = clone(pos);
        if (/^[^\r\n]/.test(input.charAt(pos.offset))) {
          result1 = input.charAt(pos.offset);
          advance(pos, 1);
        } else {
          result1 = null;
          if (reportFailures === 0) {
            matchFailed("[^\\r\\n]");
          }
        }
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            if (/^[^\r\n]/.test(input.charAt(pos.offset))) {
              result1 = input.charAt(pos.offset);
              advance(pos, 1);
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("[^\\r\\n]");
              }
            }
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, text) {return text.join("");})(pos0.offset, pos0.line, pos0.column, result0);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("some text before the end of the line");
        }
        return result0;
      }
      
      function parse_newline() {
        var result0, result1;
        var pos0, pos1;
        
        reportFailures++;
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.charCodeAt(pos.offset) === 13) {
          result0 = "\r";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"\\r\"");
          }
        }
        result0 = result0 !== null ? result0 : "";
        if (result0 !== null) {
          if (input.charCodeAt(pos.offset) === 10) {
            result1 = "\n";
            advance(pos, 1);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"\\n\"");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column) {indent = 0;})(pos0.offset, pos0.line, pos0.column);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("newline");
        }
        return result0;
      }
      
      function parse_indents() {
        var result0, result1;
        var pos0, pos1;
        
        reportFailures++;
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.charCodeAt(pos.offset) === 9) {
          result1 = "\t";
          advance(pos, 1);
        } else {
          result1 = null;
          if (reportFailures === 0) {
            matchFailed("\"\\t\"");
          }
        }
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            if (input.charCodeAt(pos.offset) === 9) {
              result1 = "\t";
              advance(pos, 1);
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("\"\\t\"");
              }
            }
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          result1 = (function(offset, line, column, data) {
          			//Predicate accepts \t token if it matches `indentToken`
          			if(indentToken == undefined)
          				indentToken = "\t";
          			return indentToken == "\t";
          		})(pos.offset, pos.line, pos.column, result0) ? "" : null;
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, data) {
        			return indent = data.length; //Return the indent value
        		})(pos0.offset, pos0.line, pos0.column, result0[0]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          if (input.charCodeAt(pos.offset) === 32) {
            result1 = " ";
            advance(pos, 1);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\" \"");
            }
          }
          if (result1 !== null) {
            result0 = [];
            while (result1 !== null) {
              result0.push(result1);
              if (input.charCodeAt(pos.offset) === 32) {
                result1 = " ";
                advance(pos, 1);
              } else {
                result1 = null;
                if (reportFailures === 0) {
                  matchFailed("\" \"");
                }
              }
            }
          } else {
            result0 = null;
          }
          if (result0 !== null) {
            result1 = (function(offset, line, column, spaces) {
            			/* Predicate accepts space tokens if `indentToken` contains
            				spaces and divides evenly into the number of spaces in
            				the `indentToken`.
            				This ensures that files indented with 3 spaces cannot
            				have lines indented with 5 spaces.  Only multiples of
            				3 spaces would be permitted, in this case.
            			*/
            			if(indentToken == undefined)
            				indentToken = spaces.join("");
            			if(indentToken.charAt(0) != " ")
            				return false;
            			else
            				return spaces.length % indentToken.length == 0;
            		})(pos.offset, pos.line, pos.column, result0) ? "" : null;
            if (result1 !== null) {
              result0 = [result0, result1];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column, spaces) {
          			//Return the indent value
          			return indent = spaces.length / indentToken.length;
          		})(pos0.offset, pos0.line, pos0.column, result0[0]);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("indents");
        }
        return result0;
      }
      
      
      function cleanupExpected(expected) {
        expected.sort();
        
        var lastExpected = null;
        var cleanExpected = [];
        for (var i = 0; i < expected.length; i++) {
          if (expected[i] !== lastExpected) {
            cleanExpected.push(expected[i]);
            lastExpected = expected[i];
          }
        }
        return cleanExpected;
      }
      
      
      
      	//The current indent of the line being parsed
      	var indent = 0;
      	//The string to be consumed and treated as a single indent token
      	var indentToken;
      	//The parent node of the node being parsed
      	var currentParentNode;
      
      
      var result = parseFunctions[startRule]();
      
      /*
       * The parser is now in one of the following three states:
       *
       * 1. The parser successfully parsed the whole input.
       *
       *    - |result !== null|
       *    - |pos.offset === input.length|
       *    - |rightmostFailuresExpected| may or may not contain something
       *
       * 2. The parser successfully parsed only a part of the input.
       *
       *    - |result !== null|
       *    - |pos.offset < input.length|
       *    - |rightmostFailuresExpected| may or may not contain something
       *
       * 3. The parser did not successfully parse any part of the input.
       *
       *   - |result === null|
       *   - |pos.offset === 0|
       *   - |rightmostFailuresExpected| contains at least one failure
       *
       * All code following this comment (including called functions) must
       * handle these states.
       */
      if (result === null || pos.offset !== input.length) {
        var offset = Math.max(pos.offset, rightmostFailuresPos.offset);
        var found = offset < input.length ? input.charAt(offset) : null;
        var errorPosition = pos.offset > rightmostFailuresPos.offset ? pos : rightmostFailuresPos;
        
        throw new this.SyntaxError(
          cleanupExpected(rightmostFailuresExpected),
          found,
          offset,
          errorPosition.line,
          errorPosition.column
        );
      }
      
      return result;
    },
    
    /* Returns the parser source code. */
    toSource: function() { return this._source; }
  };
  
  /* Thrown when a parser encounters a syntax error. */
  
  result.SyntaxError = function(expected, found, offset, line, column) {
    function buildMessage(expected, found) {
      var expectedHumanized, foundHumanized;
      
      switch (expected.length) {
        case 0:
          expectedHumanized = "end of input";
          break;
        case 1:
          expectedHumanized = expected[0];
          break;
        default:
          expectedHumanized = expected.slice(0, expected.length - 1).join(", ")
            + " or "
            + expected[expected.length - 1];
      }
      
      foundHumanized = found ? quote(found) : "end of input";
      
      return "Expected " + expectedHumanized + " but " + foundHumanized + " found.";
    }
    
    this.name = "SyntaxError";
    this.expected = expected;
    this.found = found;
    this.message = buildMessage(expected, found);
    this.offset = offset;
    this.line = line;
    this.column = column;
  };
  
  result.SyntaxError.prototype = Error.prototype;
  
  return result;
})();
